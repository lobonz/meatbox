#include "ArduinoJson.h";

///////////////////////////////////////////////
////    TIMER
///////////////////////////////////////////////
#include <arduino-timer.h>;
auto timer = timer_create_default();
Timer<> default_timer; // save as above

///////////////////////////////////////////////
////    DHT SENSOR
///////////////////////////////////////////////
// REQUIRES the following Arduino libraries:
// - DHT Sensor Library: https://github.com/adafruit/DHT-sensor-library
// - Adafruit Unified Sensor Lib: https://github.com/adafruit/Adafruit_Sensor
#include "DHT.h";
#define DHTPIN 2
// Uncomment whatever type you're using!
//#define DHTTYPE DHT11   // DHT 11
//#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321
#define DHTTYPE DHT21   // DHT 21 (AM2301)
// Initialize DHT sensor.
DHT dht(DHTPIN, DHTTYPE);

///////////////////////////////////////////////
////    LOAD CELL
///////////////////////////////////////////////
#include <HX711_ADC.h>;

unsigned long stabilizingtime = 2000; // tare preciscion can be improved by adding a few seconds of stabilizing time

//pins:
const int HX711_dout_1 = 4; //HX711 dout pin
const int HX711_sck_1 = 5; //HX711 sck pin

const int HX711_dout_2 = 6; //HX711 dout pin
const int HX711_sck_2 = 7; //HX711 sck pin

const int HX711_dout_3 = 8; //HX711 dout pin
const int HX711_sck_3 = 9; //HX711 sck pin

const int HX711_dout_4 = 10; //HX711 dout pin
const int HX711_sck_4 = 11; //HX711 sck pin

const int HX711_dout_5 = 12; //HX711 dout pin
const int HX711_sck_5 = 13; //HX711 sck pin

//HX711 constructor (dout pin, sck pin)
HX711_ADC LoadCell_1(HX711_dout_1, HX711_sck_1); //HX711 1
HX711_ADC LoadCell_2(HX711_dout_2, HX711_sck_2); //HX711 2
HX711_ADC LoadCell_3(HX711_dout_3, HX711_sck_3); //HX711 3
HX711_ADC LoadCell_4(HX711_dout_4, HX711_sck_4); //HX711 4
HX711_ADC LoadCell_5(HX711_dout_5, HX711_sck_5); //HX711 5

unsigned long t = 0;

///////////////////////////////////////////////
////    COMMAND HANDLER
///////////////////////////////////////////////
#include "CommandHandler.h"
CommandHandler<21> SerialCommandHandler;

///////////////////////////////////////////////
////    DEBUG - Comment out to stop verbose serial output
///////////////////////////////////////////////
#define DEBUG

///////////////////////////////////////////////
////    EEPROM
///////////////////////////////////////////////
#include <EEPROMex.h>
//EEPROM storage location
#define memoryBase 32
int settingsAddress=0;

/* Arrange your settings in this struct. Ensure that 'checksum' is the */
/* last item and is an unsigned int. Otherwise, do whatever you like. */
/* https://gitlab.com/snippets/1728275 */

struct meat_settings {
  float temperature_target;
  float temperature_variance;
  
  float humidity_target;
  float humidity_variance;

  float load_calibration_1;
  float load_calibration_2;
  float load_calibration_3;
  float load_calibration_4;
  float load_calibration_5;
  
  float cycle_delay = 10*1000*60; //10 minutes
  
  unsigned int checksum;
};

/* 'settings' has to be globally available, so declare it here */
meat_settings settings;

///////////////////////////////////////////////
////    STATE STRUCT
///////////////////////////////////////////////
struct meat_state {
  float temperature;
  float humidity;
  
  boolean light;
  boolean cool;
  boolean heat;
  boolean humidify;
  boolean dehumidify;
  boolean airpump;
  boolean circulate;
  boolean isactive;
  float loadcells[5];

  boolean tareloadcell_1;
  boolean tareloadcell_2;
  boolean tareloadcell_3;
  boolean tareloadcell_4;
  boolean tareloadcell_5;

  boolean newdataloadcell_1;
  boolean newdataloadcell_2;
  boolean newdataloadcell_3;
  boolean newdataloadcell_4;
  boolean newdataloadcell_5;
};
/* 'state' has to be globally available, so declare it here */
meat_state state;

/* defaultSettings() is used when the Settings read from the EEPROM fails */
/* the integrity check (which usually happens after a change to the */
/* struct, or an EEPROM read failure) */
void defaultSettings() {
  settings.temperature_target = 5;
  settings.temperature_variance = 2;
  
  settings.humidity_target = 80;
  settings.humidity_variance = 4;

  settings.load_calibration_1 = 250;
  settings.load_calibration_2 = 250;
  settings.load_calibration_3 = 250;
  settings.load_calibration_4 = 250;
  settings.load_calibration_5 = 250;
  
  settings.cycle_delay = 10*1000*60; //10 minutes
  
}

/* loadSettings() populates the settings variable, so call this before */
/* attempting to use settings. If the EEPROM read fails, then */
/* the defaultSettings() function will be called, so settings are always */
/* populated, one way or another. */
void loadSettings() {
  settings.checksum = 0;
  unsigned int sum = 0;
  unsigned char t;
  for(unsigned int i = 0; i < sizeof(settings); i++) {
    t = (unsigned char)EEPROM.read(i);
    *((char *)&settings + i) = t;
    if(i < sizeof(settings) - sizeof(settings.checksum)) {
      /* Don't checksum the checksum! */
      sum = sum + t;
    }
  }
  /* Now check the data we just read */
  if(settings.checksum != sum) {
#ifdef DEBUG
    Serial.println("Saved settings invalid - using defaults ");
    Serial.print(settings.checksum);
    Serial.print(" <> ");
    Serial.println(sum);
#endif
    defaultSettings();
    saveSettings();
  }

  Serial.println(settings.temperature_target);
  Serial.println(settings.temperature_variance);
  Serial.println(settings.humidity_target);
  Serial.println(settings.humidity_variance);
}

/* saveSettings() writes to an EEPROM (or flash on an ESP board). */
/* Call this after making any changes to the setting variable */
/* The checksum will be calculated as the data is written */
void saveSettings() {
  unsigned int sum = 0;
  unsigned char t;
  for(unsigned int i = 0; i < sizeof(meat_settings); i++) {
    if(i == sizeof(settings) - sizeof(settings.checksum)) {
      settings.checksum = sum;
    }
    t = *((unsigned char*)&settings + i);
    if(i < sizeof(settings) - sizeof(settings.checksum)) {
      /* Don't checksum the checksum! */
      sum = sum + t;
    }
    EEPROM.write(i, t);
  }
#if defined(ESP8266)
  EEPROM.commit();
#endif
}

//Default State
void defaultState(){
  state.temperature = 0;
  state.humidity = 0;
  
  state.light = false;
  state.cool = false;
  state.heat = false;
  state.humidify = false;
  state.dehumidify = false;
  state.airpump = false;
  state.circulate = false;
  state.isactive = true;
  state.loadcells[0]  = 0;
  state.loadcells[1]  = 0;
  state.loadcells[2]  = 0;
  state.loadcells[3]  = 0;
  state.loadcells[4]  = 0;

  state.tareloadcell_1 = false;
  state.tareloadcell_2 = false;
  state.tareloadcell_3 = false;
  state.tareloadcell_4 = false;
  state.tareloadcell_5 = false;

  state.newdataloadcell_1 = false;
  state.newdataloadcell_2 = false;
  state.newdataloadcell_3 = false;
  state.newdataloadcell_4 = false;
  state.newdataloadcell_5 = false;
}

//Command handling
void Cmd_ListAll(CommandParameter &Parameters)
{
  Serial.print(F("OnTime [ms]="));
  //Serial.println(OnTime);
}

void Cmd_Unknown()
{
  // Allocate the JSON document
  StaticJsonDocument<200> JsonResponse;
  JsonResponse["success"] = false;
  JsonResponse["message"] = "I don't understand";
  serializeJson(JsonResponse, Serial);
}

void Cmd_Echo(CommandParameter &Parameters)
{
  // Allocate the JSON document
  StaticJsonDocument<200> JsonResponse;
  JsonResponse["success"] = true;
  JsonResponse["message"] = Parameters.NextParameter();
  serializeJson(JsonResponse, Serial);
  Serial.println();
}
void Cmd_SetTemperatureTarget(CommandParameter &Parameters)
{
  // Allocate the JSON document
  StaticJsonDocument<200> JsonResponse;
  
  float newtemptarget = atof(Parameters.NextParameter());
  #ifdef DEBUG
    Serial.println(newtemptarget);
  #endif
  if (newtemptarget != 0.00){
    settings.temperature_target = newtemptarget;
    
    JsonResponse["success"] = true;
    JsonResponse["message"] = "Target Temperature";
    JsonResponse["target_temp"] = settings.temperature_target;
    serializeJson(JsonResponse, Serial);
    Serial.println();
    saveSettings();
  }else{
    JsonResponse["success"] = false;
    JsonResponse["message"] = "Could Not Set New Temperature Target";
    serializeJson(JsonResponse, Serial);
    Serial.println();
  }
}

void Cmd_SetTemperatureVariance(CommandParameter &Parameters)
{
  // Allocate the JSON document
  StaticJsonDocument<200> JsonResponse;
  
  float newtempvariance = atof(Parameters.NextParameter());
  #ifdef DEBUG
    Serial.println(newtempvariance);
  #endif
  if (newtempvariance != 0.00){
    settings.temperature_variance = newtempvariance;
    
    JsonResponse["success"] = true;
    JsonResponse["message"] = "Temperature Variance";
    JsonResponse["target_temp"] = settings.temperature_variance;
    serializeJson(JsonResponse, Serial);
    Serial.println();
    saveSettings();
  }else{
    JsonResponse["success"] = false;
    JsonResponse["message"] = "Could Not Set New Temperature Variance";
    serializeJson(JsonResponse, Serial);
    Serial.println();
  }
}

void Cmd_SetHumidityTarget(CommandParameter &Parameters)
{
  // Allocate the JSON document
  StaticJsonDocument<200> JsonResponse;
  
  float newhumidity = atof(Parameters.NextParameter());
  #ifdef DEBUG
    Serial.println(newhumidity);
  #endif
  if (newhumidity != 0.00){
    settings.humidity_target = newhumidity;
    
    JsonResponse["success"] = true;
    JsonResponse["message"] = "Target Humidity";
    JsonResponse["target_humidity"] = settings.humidity_target;
    serializeJson(JsonResponse, Serial);
    Serial.println();
    saveSettings();
  }else{
    JsonResponse["success"] = false;
    JsonResponse["message"] = "Could Not Set New Humidity Target";
    serializeJson(JsonResponse, Serial);
    Serial.println();
  }
}

void Cmd_SetHumidityVariance(CommandParameter &Parameters)
{
  // Allocate the JSON document
  StaticJsonDocument<200> JsonResponse;
  
  float newhumidityvariance = atof(Parameters.NextParameter());
  #ifdef DEBUG
    Serial.println(newhumidityvariance);
  #endif
  if (newhumidityvariance != 0.00){
    settings.humidity_variance = newhumidityvariance;
    
    JsonResponse["success"] = true;
    JsonResponse["message"] = "Humidity Variance";
    JsonResponse["target_temp"] = settings.humidity_variance;
    serializeJson(JsonResponse, Serial);
    Serial.println();
    saveSettings();
  }else{
    JsonResponse["success"] = false;
    JsonResponse["message"] = "Could Not Set New Humidity Variance";
    serializeJson(JsonResponse, Serial);
    Serial.println();
  }
}











void Cmd_Get(CommandParameter &Parameters)
{
  // Allocate the JSON document
  StaticJsonDocument<200> JsonResponse;
  
  String service = Parameters.NextParameter();

  if (service == ""){
    JsonResponse["success"] = true;
    if (service == "temperature")
    {
        JsonResponse["message"] = "Temperature";
        JsonResponse["temperature"] = state.temperature;
    }
    else if(service == "humidity")
    {
        JsonResponse["message"] = "Humidity";
        JsonResponse["humidity"] = state.humidity;
    }
    else if(service == "light")
    {
        JsonResponse["message"] = "Light";
        JsonResponse["light"] = state.light;
    }
    else if(service == "cool")
    {
        JsonResponse["message"] = "Cool";
        JsonResponse["cool"] = state.cool;
    }
    else if(service == "heat")
    {
        JsonResponse["message"] = "Heat";
        JsonResponse["heat"] = state.heat;
    }
    else if(service == "humidify")
    {
        JsonResponse["message"] = "Humidify";
        JsonResponse["humidify"] = state.humidify;
    }
    else if(service == "dehumidify")
    {
        JsonResponse["message"] = "Dehumidify";
        JsonResponse["dehumidify"] = state.dehumidify;
    }
    else if(service == "airpump")
    {
        JsonResponse["message"] = "Airpump";
        JsonResponse["airpump"] = state.airpump;
    }
    else if(service == "circulate")
    {
        JsonResponse["message"] = "Circulate";
        JsonResponse["circulate"] = state.circulate;
    }
    else if(service == "isactive")
    {
        JsonResponse["message"] = "Isactive";
        JsonResponse["isactive"] = state.isactive;
    }
    else if(service == "loadcells")
    {
        JsonResponse["message"] = "Loadcells";
        JsonResponse["loadcells"] = state.loadcells;
        JsonArray data = JsonResponse.createNestedArray("loadcells");
        data.add(state.loadcells[0]);
        data.add(state.loadcells[1]);
        data.add(state.loadcells[2]);
        data.add(state.loadcells[3]);
        data.add(state.loadcells[4]);
    }
    else
    {
        JsonResponse["success"] = false;
        JsonResponse["message"] = "No valid service specified: " + service;
    }
  }
  
  serializeJson(JsonResponse, Serial);
  Serial.println();
}

//void Cmd_Temperature(CommandParameter &Parameters)
//{
//  // Allocate the JSON document
//  StaticJsonDocument<200> JsonResponse;
//  JsonResponse["success"] = true;
//  JsonResponse["message"] = "Current Temperature";
//  JsonResponse["temperature"] = state.temperature;
//  serializeJson(JsonResponse, Serial);
//  Serial.println();
//}
//void Cmd_Humidity(CommandParameter &Parameters)
//{
//  // Allocate the JSON document
//  StaticJsonDocument<200> JsonResponse;
//  JsonResponse["success"] = true;
//  JsonResponse["humidity"] = state.humidity;
//  serializeJson(JsonResponse, Serial);
//  Serial.println();
//}
//void Cmd_Light(CommandParameter &Parameters)
//{
//  // Allocate the JSON document
//  StaticJsonDocument<200> JsonResponse;
//  JsonResponse["success"] = true;
//  JsonResponse["light"] = state.light;
//  serializeJson(JsonResponse, Serial);
//}
//void Cmd_Cool(CommandParameter &Parameters)
//{
//  // Allocate the JSON document
//  StaticJsonDocument<200> JsonResponse;
//  JsonResponse["success"] = true;
//  JsonResponse["cool"] = state.cool;
//  serializeJson(JsonResponse, Serial);
//}
//void Cmd_Heat(CommandParameter &Parameters)
//{
//  // Allocate the JSON document
//  StaticJsonDocument<200> JsonResponse;
//  JsonResponse["success"] = true;
//  JsonResponse["heat"] = state.heat;
//  serializeJson(JsonResponse, Serial);
//}
//void Cmd_Humidify(CommandParameter &Parameters)
//{
//  // Allocate the JSON document
//  StaticJsonDocument<200> JsonResponse;
//  JsonResponse["success"] = true;
//  JsonResponse["humidify"] = state.humidify;
//  serializeJson(JsonResponse, Serial);
//}
//void Cmd_Dehumidify(CommandParameter &Parameters)
//{
//  // Allocate the JSON document
//  StaticJsonDocument<200> JsonResponse;
//  JsonResponse["success"] = true;
//  JsonResponse["dehumidify"] = state.dehumidify;
//  serializeJson(JsonResponse, Serial);
//}
//void Cmd_Airpump(CommandParameter &Parameters)
//{
//  // Allocate the JSON document
//  StaticJsonDocument<200> JsonResponse;
//  JsonResponse["success"] = true;
//  JsonResponse["airpump"] = state.airpump;
//  serializeJson(JsonResponse, Serial);
//}
//void Cmd_Circulate(CommandParameter &Parameters)
//{
//  // Allocate the JSON document
//  StaticJsonDocument<200> JsonResponse;
//  JsonResponse["success"] = true;
//  JsonResponse["circulate"] = state.circulate;
//  serializeJson(JsonResponse, Serial);
//}
//void Cmd_Isactive(CommandParameter &Parameters)
//{
//  // Allocate the JSON document
//  StaticJsonDocument<200> JsonResponse;
//  JsonResponse["success"] = true;
//  JsonResponse["isactive"] = state.isactive;
//  serializeJson(JsonResponse, Serial);
//}
//void Cmd_Loadcells(CommandParameter &Parameters)
//{
//
//  // Allocate the JSON document
//  StaticJsonDocument<200> JsonResponse;
//  // Add an array.
//  JsonResponse["success"] = true;
//  JsonArray data = JsonResponse.createNestedArray("loadcells");
//  data.add(state.loadcells[0]);
//  data.add(state.loadcells[1]);
//  data.add(state.loadcells[2]);
//  data.add(state.loadcells[3]);
//  data.add(state.loadcells[4]);
//  serializeJson(JsonResponse, Serial);
//  Serial.println();
//}

void Cmd_GetState(CommandParameter &Parameters)
{
  // Allocate the JSON document
  StaticJsonDocument<200> JsonResponse;
  JsonResponse["success"] = true;

  JsonResponse["temperature"] = state.temperature;
  JsonResponse["humidity"] = state.humidity;
  JsonResponse["light"] = state.light;
  JsonResponse["cool"] = state.cool;
  JsonResponse["heat"] = state.heat;
  JsonResponse["humidify"] = state.humidify;
  JsonResponse["dehumidify"] = state.dehumidify;
  JsonResponse["airpump"] = state.airpump;
  JsonResponse["circulate"] = state.circulate;  
  JsonResponse["isactive"] = state.isactive;
  
  JsonArray data = JsonResponse.createNestedArray("loadcells");
  data.add(state.loadcells[0]);
  data.add(state.loadcells[1]);
  data.add(state.loadcells[2]);
  data.add(state.loadcells[3]);
  data.add(state.loadcells[4]);

  serializeJsonPretty(JsonResponse, Serial);
}

void Cmd_GetSettings(CommandParameter &Parameters)
{
  // Allocate the JSON document
  StaticJsonDocument<200> JsonResponse;
  JsonResponse["success"] = true;

  JsonResponse["temperature_target"] = settings.temperature_target;
  JsonResponse["temperature_variance"] = settings.temperature_variance;
  JsonResponse["humidity_target"] = settings.humidity_target;
  JsonResponse["humidity_variance"] = settings.humidity_variance;
  JsonResponse["cycle_delay"] = settings.cycle_delay;

  JsonResponse["load_calibration_1"] = settings.load_calibration_1;
  JsonResponse["load_calibration_2"] = settings.load_calibration_2;
  JsonResponse["load_calibration_3"] = settings.load_calibration_3;
  JsonResponse["load_calibration_4"] = settings.load_calibration_4;
  JsonResponse["load_calibration_5"] = settings.load_calibration_5;
  
  serializeJsonPretty(JsonResponse, Serial);
}

void Cmd_TareLoadCell(CommandParameter &Parameters)
{
  int loadcelltotare = atoi(Parameters.NextParameter());
  
  // Allocate the JSON document
  StaticJsonDocument<200> JsonResponse;
  JsonResponse["success"] = true;
  JsonResponse["message"] = "Starting tare 1 loadcell: " + loadcelltotare;

  
  switch(loadcelltotare){
    case 1:
      LoadCell_1.tareNoDelay();
      state.tareloadcell_1 = true;
      break;
    case 2:
      LoadCell_2.tareNoDelay();
      state.tareloadcell_2 = true;
      break;
    case 3:
      LoadCell_3.tareNoDelay();
      state.tareloadcell_3 = true;
      break;
    case 4:
      LoadCell_4.tareNoDelay();
      state.tareloadcell_4 = true;
      break;
    case 5:
      LoadCell_5.tareNoDelay();
      state.tareloadcell_5 = true;
      break;
    default:
      JsonResponse["success"] = false;
      JsonResponse["message"] = "No valid loadcell specified: " + loadcelltotare;
      
  }
  
  serializeJsonPretty(JsonResponse, Serial);
}

//!calibrateloadcell 1 500\r\n (grams)
void Cmd_CalibrateLoadCell(CommandParameter &Parameters)
{
  int loadcelltocalibrate = atoi(Parameters.NextParameter());
  int known_mass = atoi(Parameters.NextParameter());
  
  // Allocate the JSON document
  StaticJsonDocument<200> JsonResponse;
  JsonResponse["success"] = true;
  String message = "Calibrated loadcell: " + loadcelltocalibrate;
  message.concat(" Known mass: ");
  message.concat(known_mass);
  JsonResponse["message"] = message;
  
  if (known_mass > 0 && known_mass < 5000 ){
    switch(loadcelltocalibrate){
      case 1:
        LoadCell_1.refreshDataSet();
        settings.load_calibration_1 = LoadCell_1.getNewCalibration(known_mass);
        saveSettings();
        break;
      case 2:
        LoadCell_2.refreshDataSet();
        settings.load_calibration_2 = LoadCell_2.getNewCalibration(known_mass);
        saveSettings();
        break;
      case 3:
        LoadCell_3.refreshDataSet();
        settings.load_calibration_3 = LoadCell_3.getNewCalibration(known_mass);
        saveSettings();
        break;
      case 4:
        LoadCell_4.refreshDataSet();
        settings.load_calibration_4 = LoadCell_4.getNewCalibration(known_mass);
        saveSettings();
        break;
      case 5:
        LoadCell_5.refreshDataSet();
        settings.load_calibration_5 = LoadCell_5.getNewCalibration(known_mass);
        saveSettings();
        break;
      default:
        JsonResponse["success"] = false;
        JsonResponse["message"] = "No valid loadcell specified: " + loadcelltocalibrate;
        
    }
  }else{
    JsonResponse["message"] = "No valid known mass: " + known_mass;
  }
  
  serializeJsonPretty(JsonResponse, Serial);
}

bool CheckTempAndHumidity(void *) {
#ifdef DEBUG
  Serial.println("Checking Temp & Humidity");
#endif
  
  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t)) {
#ifdef DEBUG
    Serial.println(F("Failed to read from DHT sensor!"));
#endif
    return true;
  }else{
    state.temperature = t;
    state.humidity = h;
  }
  return true;//Returning true repeats the timer that called this
}

bool CheckLoadCells(void *) {
#ifdef DEBUG
  Serial.println("Checking Load Cells");
#endif

  // check for new data/start next conversion:
  //  if (LoadCell_1.update()) state.newdataloadcell_1 = true;
  //  if (LoadCell_2.update()) state.newdataloadcell_2 = true;
  //  if (LoadCell_3.update()) state.newdataloadcell_3 = true;
  //  if (LoadCell_4.update()) state.newdataloadcell_4 = true;
  //  if (LoadCell_5.update()) state.newdataloadcell_5 = true;

  //get smoothed value from data set
  if (state.newdataloadcell_1) {
      state.loadcells[0] = LoadCell_1.getData();
 #ifdef DEBUG
      Serial.print("Load_cell 1 output val: ");
      Serial.println(state.loadcells[0]);
 #endif
      state.newdataloadcell_1 = false;
  }
    if (state.newdataloadcell_2) {
      state.loadcells[1] = LoadCell_2.getData();
 #ifdef DEBUG
      Serial.print("Load_cell 2 output val: ");
      Serial.println(state.loadcells[1]);
 #endif
      state.newdataloadcell_2 = false;
  }
    if (state.newdataloadcell_3) {
      state.loadcells[2] = LoadCell_3.getData();
 #ifdef DEBUG
      Serial.print("Load_cell 3 output val: ");
      Serial.println(state.loadcells[2]);
 #endif
      state.newdataloadcell_3 = false;
  }
    if (state.newdataloadcell_4) {
      state.loadcells[3] = LoadCell_4.getData();
 #ifdef DEBUG
      Serial.print("Load_cell 4 output val: ");
      Serial.println(state.loadcells[3]);
 #endif
      state.newdataloadcell_4 = false;
  }
    if (state.newdataloadcell_5) {
      state.loadcells[4] = LoadCell_5.getData();
 #ifdef DEBUG
      Serial.print("Load_cell 5 output val: ");
      Serial.println(state.loadcells[4]);
 #endif
      state.newdataloadcell_5 = false;
  }
  
  return true;//Returning true repeats the timer that called this
}

//Setup & Loop
void setup() {
  Serial.begin(9600);
  while (!Serial) continue;
  Serial.println("Starting...");

  ///START LOAD SETTINGS
  EEPROM.setMemPool(memoryBase, EEPROMSizeMega); //Set memorypool base to 32, memory for Arduino Mega board
  settingsAddress  = EEPROM.getAddress(sizeof(meat_settings)); // Size of settings object
  Serial.println("Loading settings");
  loadSettings();
  ///END LOAD SETTINGS

  ///START TEMPERATURE & HUMIDITY SENSOR
  dht.begin();
  
  ///START TIMER TO CHECK TEMP & HUMIDITY
  timer.every(10 * 1000, CheckTempAndHumidity);

  ///START TIMER TO CHECK LOADCELLS
  timer.every(15 * 1000, CheckLoadCells);


  ///START SETUP COMMAND HANDLER
  SerialCommandHandler.AddCommand(F("echo"), Cmd_Echo);
  SerialCommandHandler.AddCommand(F("temperature"), Cmd_Get);
//  SerialCommandHandler.AddCommand(F("temperature"), Cmd_Temperature);
//  SerialCommandHandler.AddCommand(F("humidity"), Cmd_Humidity);
//  SerialCommandHandler.AddCommand(F("light"), Cmd_Light);
//  SerialCommandHandler.AddCommand(F("cool"), Cmd_Cool);
//  SerialCommandHandler.AddCommand(F("heat"), Cmd_Heat);
//  SerialCommandHandler.AddCommand(F("humidify"), Cmd_Humidify);
//  SerialCommandHandler.AddCommand(F("dehumidify"), Cmd_Dehumidify);
//  SerialCommandHandler.AddCommand(F("airpump"), Cmd_Airpump);
//  SerialCommandHandler.AddCommand(F("circulate"), Cmd_Circulate);
//  SerialCommandHandler.AddCommand(F("isactive"), Cmd_Isactive);
//  SerialCommandHandler.AddCommand(F("loadcells"), Cmd_Loadcells);
  //12
  
  SerialCommandHandler.AddCommand(F("settemperaturetarget"), Cmd_SetTemperatureTarget);
  SerialCommandHandler.AddCommand(F("settemperaturevariance"), Cmd_SetTemperatureVariance);
  SerialCommandHandler.AddCommand(F("sethumiditytarget"), Cmd_SetHumidityTarget);
  SerialCommandHandler.AddCommand(F("sethumidityvariance"), Cmd_SetHumidityVariance);
  //16
  
  SerialCommandHandler.AddCommand(F("tareloadcell"), Cmd_TareLoadCell);
  SerialCommandHandler.AddCommand(F("calibrateloadcell"), Cmd_CalibrateLoadCell);
  //18
  
  SerialCommandHandler.AddCommand(F("getstate"), Cmd_GetState);
  SerialCommandHandler.AddCommand(F("getsettings"), Cmd_GetSettings);
  //20
  
  SerialCommandHandler.SetDefaultHandler(Cmd_Unknown);
  //21
  ///END SETUP COMMAND HANDLER

  ///START LOAD CELL SETUP
  LoadCell_1.begin();
  LoadCell_2.begin();
  LoadCell_3.begin();
  LoadCell_4.begin();
  LoadCell_5.begin();

  boolean _tare = false; //set this to false if you don't want tare to be performed in the next step
  byte loadcell_1_rdy = 0;
  byte loadcell_2_rdy = 0;
  byte loadcell_3_rdy = 0;
  byte loadcell_4_rdy = 0;
  byte loadcell_5_rdy = 0;
  
  //delay(2000);
  while ((loadcell_1_rdy ) < 1) { // + loadcell_2_rdy + loadcell_3_rdy + loadcell_4_rdy + loadcell_5_rdy) < 1) { //run startup, stabilization and tare on all modules simultaniously
    if (!loadcell_1_rdy) loadcell_1_rdy = LoadCell_1.startMultiple(stabilizingtime, _tare);
    if (!loadcell_2_rdy) loadcell_2_rdy = LoadCell_2.startMultiple(stabilizingtime, _tare);
    if (!loadcell_3_rdy) loadcell_3_rdy = LoadCell_3.startMultiple(stabilizingtime, _tare);
    if (!loadcell_4_rdy) loadcell_4_rdy = LoadCell_4.startMultiple(stabilizingtime, _tare);
    if (!loadcell_5_rdy) loadcell_5_rdy = LoadCell_5.startMultiple(stabilizingtime, _tare);
  }
  //delay(10000);
  
  if (LoadCell_1.getTareTimeoutFlag()) {
    Serial.println("Timeout, check MCU>HX711 no.1 wiring and pin designations");
  }
  if (LoadCell_2.getTareTimeoutFlag()) {
    Serial.println("Timeout, check MCU>HX711 no.2 wiring and pin designations");
  }
  if (LoadCell_3.getTareTimeoutFlag()) {
    Serial.println("Timeout, check MCU>HX711 no.3 wiring and pin designations");
  }
  if (LoadCell_4.getTareTimeoutFlag()) {
    Serial.println("Timeout, check MCU>HX711 no.4 wiring and pin designations");
  }
  if (LoadCell_5.getTareTimeoutFlag()) {
    Serial.println("Timeout, check MCU>HX711 no.5 wiring and pin designations");
  }
  Serial.print("settings.load_calibration_1: ");
  Serial.println(settings.load_calibration_1);
  LoadCell_1.setCalFactor(settings.load_calibration_1); // user set calibration value (float)
  LoadCell_2.setCalFactor(settings.load_calibration_2); // user set calibration value (float)
  LoadCell_3.setCalFactor(settings.load_calibration_3); // user set calibration value (float)
  LoadCell_4.setCalFactor(settings.load_calibration_4); // user set calibration value (float)
  LoadCell_5.setCalFactor(settings.load_calibration_5); // user set calibration value (float)
  ///END LOAD CELL SETUP

}

void loop() {
  //tick the timer
  timer.tick();
  
  // Check for serial commands and dispatch them.
  SerialCommandHandler.Process();


  if (state.tareloadcell_1){
    //check if last tare operation is complete
    if (LoadCell_1.getTareStatus() == true) {
      Serial.println("Tare load cell 1 complete");
      state.tareloadcell_1 = false;
    }
  }
  if (state.tareloadcell_2){
    //check if last tare operation is complete
    if (LoadCell_2.getTareStatus() == true) {
      Serial.println("Tare load cell 2 complete");
      state.tareloadcell_2 = false;
    }
  }
  if (state.tareloadcell_3){
    //check if last tare operation is complete
    if (LoadCell_3.getTareStatus() == true) {
      Serial.println("Tare load cell 3 complete");
      state.tareloadcell_3 = false;
    }
  }
  if (state.tareloadcell_4){
    //check if last tare operation is complete
    if (LoadCell_4.getTareStatus() == true) {
      Serial.println("Tare load cell 4 complete");
      state.tareloadcell_4 = false;
    }
  }
  if (state.tareloadcell_5){
    //check if last tare operation is complete
    if (LoadCell_5.getTareStatus() == true) {
      Serial.println("Tare load cell 5 complete");
      state.tareloadcell_5 = false;
    }
  }

// static boolean newDataReady = 0;
// const int serialPrintInterval = 15000; //increase value to slow down serial print activity
  
//Appears we need to keep calling update to keep data fresh
if (LoadCell_1.update()) state.newdataloadcell_1 = true;
if (LoadCell_2.update()) state.newdataloadcell_2 = true;
if (LoadCell_3.update()) state.newdataloadcell_3 = true;
if (LoadCell_4.update()) state.newdataloadcell_4 = true;
if (LoadCell_5.update()) state.newdataloadcell_5 = true;

}
